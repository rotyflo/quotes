{"version":3,"sources":["components/Quote.js","actions/writeQuotesToState.js","actions/setRandomIndex.js","components/App.js","reducers/index.js","store/index.js","index.js"],"names":["Quote","fetch","then","response","json","data","props","writeQuotesToState","setRandomIndex","i","this","index","text","quotes","author","tweet","id","className","onClick","href","target","rel","React","Component","connect","state","dispatch","type","App","WRITE_QUOTES_TO_STATE","SET_RANDOM_INDEX","defaultState","createStore","action","Object","assign","maxIndex","length","randIndex","Math","round","random","applyMiddleware","thunk","ReactDOM","render","store","document","getElementById"],"mappings":"iNAQMA,E,uKAEL,WAAqB,IAAD,OACnBC,MALa,+BAMXC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACL,EAAKC,MAAMC,mBAAmBF,GAC9B,EAAKC,MAAME,sB,oBAId,WAAU,IAAD,OACJC,EAAIC,KAAKJ,MAAMK,MACfC,EAAOF,KAAKJ,MAAMO,OAAOJ,GAAGG,KAC5BE,EAASJ,KAAKJ,MAAMO,OAAOJ,GAAGK,OAClCA,EAASA,GAAkB,UAC3B,IAAIC,EAAK,UAAMH,EAAN,cAAgBE,GAEzB,OACC,sBAAKE,GAAG,YAAR,UACC,sBAAKC,UAAU,gBAAf,UACC,0DACA,sBAAKD,GAAG,QAAR,UACC,kCAAKJ,EAAL,OACA,oBAAGI,GAAG,SAAN,eAAkBF,WAIpB,sBAAKE,GAAG,UAAR,UACC,wBACCA,GAAG,YACHC,UAAU,kBACVC,QAAS,WAAQ,EAAKZ,MAAME,kBAH7B,uBAQA,mBACCQ,GAAG,cACHC,UAAU,kBACVE,KA3Ca,yCA2CMJ,EACnBK,OAAO,SACPC,IAAI,aALL,6B,GArCeC,IAAMC,WAuEXC,mBAlBf,SAAyBC,GACxB,MAAO,CACNZ,OAAQY,EAAMZ,OACdF,MAAOc,EAAMd,UAIf,SAA4Be,GAC3B,MAAO,CACNnB,mBAAoB,SAACF,GACpBqB,ECrEY,SAAuBrB,GACrC,MAAO,CACNsB,KAJ4B,wBAK5Bd,OAAQR,GDkEEE,CAAmBF,KAE7BG,eAAgB,WACfkB,EEvEK,CACNC,KAJuB,yBF+EVH,CAA6CxB,GG5E7C,SAAS4B,IACtB,OACE,qBAAKX,UAAU,YAAf,SACE,cAAC,EAAD,M,WCNAY,EAAwB,wBACxBC,EAAmB,mBAEnBC,EAAe,CACpBlB,OAAQ,CAAC,CAACD,KAAM,aAAcE,OAAQ,KACtCH,MAAO,G,YCDOqB,eDIA,WAAqD,IAA/BP,EAA8B,uDAAtBM,EAAcE,EAAQ,uCAClE,OAAQA,EAAON,MACd,KAAKE,EACJ,OAAOK,OAAOC,OAAO,GAAIV,EAAO,CAACZ,OAAQoB,EAAOpB,SAEjD,KAAKiB,EACJ,IAAIM,EAAWX,EAAMZ,OAAOwB,OACxBC,EAAYC,KAAKC,MAAMD,KAAKE,SAAWL,GAC3C,OAAOF,OAAOC,OAAO,GAAIV,EAAO,CAACd,MAAO2B,IAEzC,QACC,OAAOb,KCf+BiB,YAAgBC,M,YCGzDC,IAASC,OACP,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAClB,EAAD,MAEFmB,SAASC,eAAe,W","file":"static/js/main.bf93ec40.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport writeQuotesToState from '../actions/writeQuotesToState';\nimport setRandomIndex from '../actions/setRandomIndex';\n\nconst twitterURL = 'https://twitter.com/intent/tweet?text=';\nconst apiURL = 'https://type.fit/api/quotes';\n\nclass Quote extends React.Component {\n\t// Get quote on page load\n\tcomponentDidMount() {\n\t\tfetch(apiURL)\n\t\t\t.then(response => response.json())\n\t\t\t.then(data => {\n\t\t\t\tthis.props.writeQuotesToState(data);\n\t\t\t\tthis.props.setRandomIndex();\n\t\t\t});\n\t}\n\n\trender() {\n\t\tlet i = this.props.index;\n\t\tlet text = this.props.quotes[i].text;\n\t\tlet author = this.props.quotes[i].author;\n\t\tauthor = author ? author : 'Unknown';\n\t\tlet tweet = `${text} - ${author}`;\n\n\t\treturn (\n\t\t\t<div id=\"quote-box\">\n\t\t\t\t<div className=\"terminal-card\">\n\t\t\t\t\t<header>Random Quote Machine</header>\n\t\t\t\t\t<div id=\"quote\">\n\t\t\t\t\t\t<p>\"{text}\"</p>\n\t\t\t\t\t\t<p id=\"author\">- {author}</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div id=\"buttons\">\n\t\t\t\t\t<button\n\t\t\t\t\t\tid=\"new-quote\"\n\t\t\t\t\t\tclassName=\"btn btn-default\"\n\t\t\t\t\t\tonClick={() => { this.props.setRandomIndex() }}\n\t\t\t\t\t>\n\t\t\t\t\t\tGet Quote\n\t\t\t\t\t</button>\n\n\t\t\t\t\t<a\n\t\t\t\t\t\tid=\"tweet-quote\"\n\t\t\t\t\t\tclassName=\"btn btn-primary\"\n\t\t\t\t\t\thref={twitterURL + tweet}\n\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\trel=\"noreferrer\"\n\t\t\t\t\t>\n\t\t\t\t\t\tTweet\n\t\t\t\t\t</a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n// connect to store\nfunction mapStateToProps(state) {\n\treturn {\n\t\tquotes: state.quotes,\n\t\tindex: state.index\n\t}\n}\n\nfunction mapDispatchToProps(dispatch) {\n\treturn {\n\t\twriteQuotesToState: (data) => {\n\t\t\tdispatch(writeQuotesToState(data));\n\t\t},\n\t\tsetRandomIndex: () => {\n\t\t\tdispatch(setRandomIndex());\n\t\t}\n\t}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Quote);\n","const WRITE_QUOTES_TO_STATE = 'WRITE_QUOTES_TO_STATE';\n\nexport default function completeFetch(data) {\n\treturn {\n\t\ttype: WRITE_QUOTES_TO_STATE,\n\t\tquotes: data\n\t};\n};","const SET_RANDOM_INDEX = 'SET_RANDOM_INDEX';\n\nexport default function setRandomIndex() {\n\treturn {\n\t\ttype: SET_RANDOM_INDEX\n\t}\n}","import React from 'react';\nimport Quote from './Quote';\n\nexport default function App() {\n  return (\n    <div className=\"container\">\n      <Quote />\n    </div>\n  );\n}","const WRITE_QUOTES_TO_STATE = 'WRITE_QUOTES_TO_STATE';\nconst SET_RANDOM_INDEX = 'SET_RANDOM_INDEX';\n\nconst defaultState = {\n\tquotes: [{text: 'loading...', author: ''}],\n\tindex: 0\n}\n\nexport default function quoteReducer(state = defaultState, action) {\n\tswitch (action.type) {\n\t\tcase WRITE_QUOTES_TO_STATE:\n\t\t\treturn Object.assign({}, state, {quotes: action.quotes});\n\n\t\tcase SET_RANDOM_INDEX:\n\t\t\tlet maxIndex = state.quotes.length;\n\t\t\tlet randIndex = Math.round(Math.random() * maxIndex);\n\t\t\treturn Object.assign({}, state, {index: randIndex});\n\t\t\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};","import { createStore, applyMiddleware } from 'redux';\nimport quoteReducer from '../reducers';\nimport thunk from 'redux-thunk';\n\nexport default createStore(quoteReducer, applyMiddleware(thunk));","import ReactDOM from 'react-dom';\nimport App from './components/App';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport './index.css';\nimport 'terminal.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}